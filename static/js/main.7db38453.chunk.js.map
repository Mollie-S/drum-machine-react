{"version":3,"sources":["components/header.js","components/display.js","components/drumpad.js","App.js","serviceWorker.js","index.js"],"names":["Header","Display","props","id","displaySound","DrumPad","audioRef","useRef","useEffect","document","addEventListener","handleKeyDown","removeEventListener","e","key","toLowerCase","drumPadKey","audioPlay","current","paused","pause","currentTime","play","onPlay","source","process","audiosource","className","onClick","src","ref","drumPadElements","App","useState","setDisplaySound","prevState","setTimeout","slice","currentSound","length","drumPad","map","element","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAUeA,MARf,WACE,OACE,gCACE,8CCKSC,MARf,SAAiBC,GACf,OACE,yBAAKC,GAAG,WACN,2BAAID,EAAME,gBCuCDC,MA1Cf,SAAiBH,GACf,IAAMI,EAAWC,mBAEjBC,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWC,GAC9B,WACLF,SAASG,oBAAoB,UAAWD,OAI5C,IAAMA,EAAgB,SAACE,GACjBA,EAAEC,IAAIC,gBAAkBb,EAAMc,WAAWD,eAC3CE,KAIEA,EAAY,WACXX,EAASY,QAAQC,SACpBb,EAASY,QAAQE,QACjBd,EAASY,QAAQG,YAAc,GAGjCf,EAASY,QAAQI,OACjBpB,EAAMqB,OAAOrB,EAAMC,KAGfqB,EAAM,UAAMC,sBAAN,mBAAuCvB,EAAMwB,aAEzD,OACE,yBAAKC,UAAWzB,EAAMyB,UAAWxB,GAAID,EAAMC,GAAIyB,QAASX,GACrDf,EAAMc,WAEP,2BACEW,UAAU,OACVxB,GAAID,EAAMc,WACVa,IAAKL,EACLM,IAAKxB,MC/BPyB,G,MAAkB,CACtB,CACE5B,GAAI,OACJa,WAAY,IACZU,YAAa,WACbC,UAAW,YAEb,CACExB,GAAI,QACJa,WAAY,IACZU,YAAa,YACbC,UAAW,YAEb,CACExB,GAAI,OACJa,WAAY,IACZU,YAAa,WACbC,UAAW,YAEb,CACExB,GAAI,OACJa,WAAY,IACZU,YAAa,WACbC,UAAW,YAEb,CACExB,GAAI,UACJa,WAAY,IACZU,YAAa,cACbC,UAAW,YAEb,CACExB,GAAI,OACJa,WAAY,IACZU,YAAa,WACbC,UAAW,YAEb,CACExB,GAAI,QACJa,WAAY,IACZU,YAAa,YACbC,UAAW,YAEb,CACExB,GAAI,OACJa,WAAY,IACZU,YAAa,WACbC,UAAW,YAEb,CAAExB,GAAI,MAAOa,WAAY,IAAKU,YAAa,UAAWC,UAAW,cAmCpDK,MAhCf,WAAgB,IAAD,EAC2BC,mBAAS,IADpC,mBACN7B,EADM,KACQ8B,EADR,KAGPX,EAAS,SAACpB,GACd+B,GAAgB,SAACC,GAAD,4BAAmBA,GAAnB,CAA8BhC,OAC9CiC,YAAW,WACTF,GAAgB,SAACC,GAAD,OAAeA,EAAUE,MAAM,QAC9C,MAGCC,EAAelC,EAAaA,EAAamC,OAAS,GAElDC,EAAUT,EAAgBU,KAAI,SAACC,GAAD,OAClC,kBAAC,EAAD,CACE5B,IAAK4B,EAAQ1B,WACbA,WAAY0B,EAAQ1B,WACpBb,GAAIuC,EAAQvC,GACZuB,YAAagB,EAAQhB,YACrBH,OAAQA,EACRI,UAAWvB,EAAauC,SAASD,EAAQvC,IAAM,UAAY,gBAI/D,OACE,yBAAKA,GAAG,gBACN,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASC,aAAckC,IACvB,yBAAKnC,GAAG,gBAAgBqC,KC1EVI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAAS2C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7db38453.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>DRUM MACHINE</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Display(props) {\n  return (\n    <div id=\"display\">\n      <p>{props.displaySound}</p>\n    </div>\n  );\n}\n\nexport default Display;\n","import React, { useEffect, useRef } from \"react\";\n\nfunction DrumPad(props) {\n  const audioRef = useRef();\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  });\n\n  const handleKeyDown = (e) => {\n    if (e.key.toLowerCase() === props.drumPadKey.toLowerCase()) {\n      audioPlay();\n    }\n  };\n\n  const audioPlay = () => {\n    if (!audioRef.current.paused) {\n      audioRef.current.pause();\n      audioRef.current.currentTime = 0;\n    }\n\n    audioRef.current.play();\n    props.onPlay(props.id);\n  };\n\n  const source = `${process.env.PUBLIC_URL}/sounds/${props.audiosource}`;\n\n  return (\n    <div className={props.className} id={props.id} onClick={audioPlay}>\n      {props.drumPadKey}\n      {/* <span>{props.id}</span> */}\n      <audio\n        className=\"clip\"\n        id={props.drumPadKey}\n        src={source}\n        ref={audioRef}\n      ></audio>\n    </div>\n  );\n}\n\nexport default DrumPad;\n","import React, { useState } from \"react\";\nimport Header from \"./components/header\";\nimport Display from \"./components/display\";\nimport DrumPad from \"./components/drumpad\";\n\nimport \"./App.css\";\n\nconst drumPadElements = [\n  {\n    id: \"clap\",\n    drumPadKey: \"Q\",\n    audiosource: \"clap.wav\",\n    className: \"drum-pad\",\n  },\n  {\n    id: \"hihat\",\n    drumPadKey: \"W\",\n    audiosource: \"hihat.wav\",\n    className: \"drum-pad\",\n  },\n  {\n    id: \"kick\",\n    drumPadKey: \"E\",\n    audiosource: \"kick.wav\",\n    className: \"drum-pad\",\n  },\n  {\n    id: \"boom\",\n    drumPadKey: \"A\",\n    audiosource: \"boom.wav\",\n    className: \"drum-pad\",\n  },\n  {\n    id: \"openhat\",\n    drumPadKey: \"S\",\n    audiosource: \"openhat.wav\",\n    className: \"drum-pad\",\n  },\n  {\n    id: \"ride\",\n    drumPadKey: \"D\",\n    audiosource: \"ride.wav\",\n    className: \"drum-pad\",\n  },\n  {\n    id: \"snare\",\n    drumPadKey: \"Z\",\n    audiosource: \"snare.wav\",\n    className: \"drum-pad\",\n  },\n  {\n    id: \"tink\",\n    drumPadKey: \"X\",\n    audiosource: \"tink.wav\",\n    className: \"drum-pad\",\n  },\n  { id: \"tom\", drumPadKey: \"C\", audiosource: \"tom.wav\", className: \"drum-pad\" },\n];\n\nfunction App() {\n  const [displaySound, setDisplaySound] = useState([]);\n\n  const onPlay = (id) => {\n    setDisplaySound((prevState) => [...prevState, id]);\n    setTimeout(() => {\n      setDisplaySound((prevState) => prevState.slice(1));\n    }, 300);\n  };\n\n  const currentSound = displaySound[displaySound.length - 1];\n\n  const drumPad = drumPadElements.map((element) => (\n    <DrumPad\n      key={element.drumPadKey}\n      drumPadKey={element.drumPadKey}\n      id={element.id}\n      audiosource={element.audiosource}\n      onPlay={onPlay}\n      className={displaySound.includes(element.id) ? \"playing\" : \"drum-pad\"}\n    />\n  ));\n\n  return (\n    <div id=\"drum-machine\">\n      <Header />\n      <Display displaySound={currentSound} />\n      <div id=\"drumPadPanel\">{drumPad}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}